name: Business Central CI/CD Pipeline

on:
  push:
    branches: [Production]

  pull_request:
    branches: [main, Production, staging]

jobs:
  build:
    runs-on: windows-latest
    
    env:
      APP_NAME: Default Publisher_Dala-Dala_
      APP_VERSION: '1.0.0.${{ github.run_number }}'
      BC_ADMIN_USER: ${{ secrets.BC_ADMIN_USER }}
      BC_ADMIN_PASSWORD: ${{ secrets.BC_ADMIN_PASSWORD }}
      BC_URL: ${{ secrets.BC_URL }}
      BC_TENANT: ${{ secrets.BC_TENANT }}
      
    strategy:
      max-parallel: 2
      matrix:
        bc-version: ['24.0']  # Business Central version
        al-app-version: ['24.0.0.0']  # AL App version

    steps:
    - uses: actions/checkout@v3
   
    - name: Install BcContainerHelper
      run: |
        Install-Module BcContainerHelper -Force -Scope CurrentUser
        Import-Module BcContainerHelper
      shell: pwsh
          
    # - name: Download AL Compiler
    #   run: |
    #     # Create directory for packages
    #     New-Item -Path ".alpackages" -ItemType Directory -Force
        
    #     # Set BC version (adjust to match your target Business Central version)
    #     $bcVersion = "24.0"
    #     $country = "W1"
        
    #     # Get the BC artifact URL
    #     Write-Host "Getting Business Central artifact URL..."
    #     $artifactUrl = Get-BCArtifactUrl -type OnPrem -version $bcVersion -country $country -select Latest
    #     Write-Host "Artifact URL: $artifactUrl"
        
    #     # Create a custom path for the artifacts
    #     $artifactPath = Join-Path $env:TEMP "BCArtifacts"
    #     New-Item -Path $artifactPath -ItemType Directory -Force -ErrorAction SilentlyContinue
        
    #     # Download BC artifacts with the correct parameter (-basePath)
    #     Write-Host "Downloading Business Central artifacts..."
    #     $downloadedPaths = Download-Artifacts -artifactUrl $artifactUrl -includePlatform -basePath $artifactPath
        
    #     Write-Host "Download completed. Artifacts at: $downloadedPaths"
        
    #     # Get the platform path from returned array
    #     $platformPath = $downloadedPaths[1]
    #     Write-Host "Platform path: $platformPath"
        
    #     # Create path for AL compiler
    #     $alcPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "alc"
    #     New-Item -Path $alcPath -ItemType Directory -Force
        
    #     # Find the compiler in the downloaded artifacts
    #     Write-Host "Searching for AL compiler in artifacts..."
    #     $alcFiles = Get-ChildItem -Path $platformPath -Filter "alc.exe" -Recurse -ErrorAction SilentlyContinue
        
    #     if ($alcFiles.Count -gt 0) {
    #         # Get the first alc.exe found
    #         $alcExe = $alcFiles[0]
    #         $alcSourcePath = $alcExe.Directory.Parent.FullName
            
    #         Write-Host "Found AL compiler at $($alcExe.FullName)"
    #         Write-Host "Copying from $alcSourcePath to $alcPath"
            
    #         # Copy the AL compiler to our project
    #         Copy-Item -Path "$alcSourcePath\*" -Destination $alcPath -Recurse -Force
            
    #         # Verify the copy was successful
    #         if (Test-Path (Join-Path $alcPath "bin\win32\alc.exe")) {
    #             Write-Host "AL Compiler copied successfully"
    #         } else {
    #             Write-Error "Failed to copy AL compiler correctly"
    #             exit 1
    #         }
    #     } else {
    #         Write-Error "Could not find alc.exe in downloaded artifacts. Searching in platform path: $platformPath"
    #         Get-ChildItem -Path $platformPath -Recurse | Select-Object -First 20 | ForEach-Object { Write-Host $_.FullName }
    #         exit 1
    #     }
    #   shell: pwsh

    - name: Download AL Compiler
      run: |
        # Create directory for packages
        New-Item -Path ".alpackages" -ItemType Directory -Force
        
        # Set BC version (adjust to match your target Business Central version)
        $bcVersion = "24.0"  # Updated to version 24.0 based on your error message
        $country = "w1"
        
        # Get the BC artifact URL
        Write-Host "Getting Business Central artifact URL..."
        $artifactUrl = Get-BCArtifactUrl -type OnPrem -version $bcVersion -country $country -select Latest
        Write-Host "Artifact URL: $artifactUrl"
        
        # Create a custom path for the artifacts
        $artifactPath = Join-Path $env:TEMP "BCArtifacts"
        New-Item -Path $artifactPath -ItemType Directory -Force -ErrorAction SilentlyContinue
        
        # Download BC artifacts with the correct parameter (-basePath)
        Write-Host "Downloading Business Central artifacts..."
        $downloadedPaths = Download-Artifacts -artifactUrl $artifactUrl -includePlatform -basePath $artifactPath
        
        Write-Host "Download completed. Artifacts at: $downloadedPaths"
        
        # Get the platform path from returned array
        $platformPath = $downloadedPaths[1]
        Write-Host "Platform path: $platformPath"
        
        # Create path for AL compiler
        $alcPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "alc"
        New-Item -Path $alcPath -ItemType Directory -Force
        
        # Explore the platform directory structure
        Write-Host "Exploring platform directory structure..."
        $platformDirs = Get-ChildItem -Path $platformPath -Directory
        foreach ($dir in $platformDirs) {
            Write-Host "Directory: $($dir.FullName)"
            Get-ChildItem -Path $dir.FullName -Directory | ForEach-Object { Write-Host "  - $($_.FullName)" }
        }
        
        # Look for the 'Modern Development Environment' directory
        $modernDevDir = Get-ChildItem -Path $platformPath -Filter "Modern*" -Directory -Recurse
        if ($modernDevDir) {
            Write-Host "Found Modern Development directory: $($modernDevDir.FullName)"
            Get-ChildItem -Path $modernDevDir.FullName -Recurse | Select-Object -First 30 | ForEach-Object { Write-Host $_.FullName }
        }
        
        # First attempt to find alc.exe anywhere in the platform
        Write-Host "Searching for alc.exe in platform path..."
        $alcFiles = Get-ChildItem -Path $platformPath -Filter "alc.exe" -Recurse -ErrorAction SilentlyContinue
        
        if ($alcFiles.Count -gt 0) {
            # Get the first alc.exe found
            $alcExe = $alcFiles[0]
            $alcSourcePath = $alcExe.Directory.FullName
            
            Write-Host "Found AL compiler at $($alcExe.FullName)"
            Write-Host "Copying from $alcSourcePath to $alcPath"
            
            # Copy the AL compiler folder to our project
            Copy-Item -Path "$alcSourcePath\*" -Destination $alcPath -Recurse -Force
            
            # Verify the copy was successful
            if (Test-Path (Join-Path $alcPath "alc.exe")) {
                Write-Host "AL Compiler copied successfully"
            } else {
                Write-Error "Failed to copy AL compiler correctly"
                exit 1
            }
        } else {
            # Try to locate vscode-server folder which might contain the compiler
            Write-Host "Searching for vscode-server folder..."
            $vscodeDirs = Get-ChildItem -Path $platformPath -Filter "vscode-server" -Directory -Recurse -ErrorAction SilentlyContinue
            
            if ($vscodeDirs.Count -gt 0) {
                $vscodeDir = $vscodeDirs[0].FullName
                Write-Host "Found vscode-server folder at: $vscodeDir"
                
                # Look for AL extension in vscode-server
                $alExtension = Get-ChildItem -Path $vscodeDir -Filter "al-*.vsix" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
                
                if ($alExtension) {
                    Write-Host "Found AL extension at: $($alExtension.FullName)"
                    
                    # Extract the VSIX (which is actually a zip)
                    $tempExtractPath = Join-Path $env:TEMP "ALExtension"
                    New-Item -Path $tempExtractPath -ItemType Directory -Force -ErrorAction SilentlyContinue
                    
                    Write-Host "Extracting AL extension to: $tempExtractPath"
                    Expand-Archive -Path $alExtension.FullName -DestinationPath $tempExtractPath -Force
                    
                    # Look for AL compiler in extracted files
                    $extractedAlc = Get-ChildItem -Path $tempExtractPath -Filter "alc.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
                    
                    if ($extractedAlc) {
                        Write-Host "Found alc.exe in extracted extension at: $($extractedAlc.FullName)"
                        $alcSourcePath = $extractedAlc.Directory.FullName
                        
                        # Copy to our project
                        Copy-Item -Path "$alcSourcePath\*" -Destination $alcPath -Recurse -Force
                        
                        if (Test-Path (Join-Path $alcPath "alc.exe")) {
                            Write-Host "AL Compiler copied successfully from extension"
                        } else {
                            Write-Error "Failed to copy AL compiler from extension"
                            exit 1
                        }
                    } else {
                        Write-Error "Could not find alc.exe in extracted extension"
                        exit 1
                    }
                } else {
                    Write-Error "Could not find AL extension in vscode-server folder"
                    exit 1
                }
            } else {
                Write-Error "Could not find vscode-server folder or alc.exe in downloaded artifacts"
                exit 1
            }
        }
      shell: pwsh

    - name: Install AL Language Extension dependencies
      run: |
        Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2143311" -OutFile "al-compiler.vsix"
        mkdir -p ${env:USERPROFILE}\.alpackages
      
    - name: Set App Version
      run: |
        $appJsonPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "app.json"
        $appJson = Get-Content $appJsonPath | ConvertFrom-Json
        $appJson.version = $env:APP_VERSION
        $appJson | ConvertTo-Json -Depth 100 | Set-Content $appJsonPath
      shell: pwsh
    
      
    - name: Download BC Symbols
      run: |
        New-Item -ItemType Directory -Force -Path ".alpackages"
        # Download symbols code here
        
    - name: Compile AL App
      run: |
        $alcExe = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "alc\bin\win32\alc.exe"
        & $alcExe /project:$env:GITHUB_WORKSPACE /packagecachepath:$env:GITHUB_WORKSPACE\.alpackages /out:$env:GITHUB_WORKSPACE\$env:APP_NAME.app
      shell: pwsh
        
    - name: Run AL Tests
      run: |
        # Run AL tests code here
        # Output test results to test-results.json
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results.json
        
    - name: Upload App Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}
        path: ${{ env.APP_NAME }}.app


    
    # Only continue to Docker build if this is a push to production (not PR)
    - name: Set build outputs
      id: vars
      run: |
        echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        echo "::set-output name=docker_tag::$(date +'%Y%m%d')_$(git rev-parse --short HEAD)"

  docker-build-push:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download App Package
        uses: actions/download-artifact@v4
        with:
          name: app-package
          path: ./app-package
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bc-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/bc-app:${{ needs.build.outputs.docker_tag }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bc-app:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bc-app:buildcache,mode=max
      


