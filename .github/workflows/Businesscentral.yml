name: Business Central CI/CD Pipeline

on:
  push:
    branches: [Production]

  pull_request:
    branches: [main, Production, staging]

jobs:
  build:
    runs-on: windows-latest
    
    env:
      APP_NAME: Default Publisher_Dala-Dala_
      APP_VERSION: '1.0.0.${{ github.run_number }}'
      BC_ADMIN_USER: ${{ secrets.BC_ADMIN_USER }}
      BC_ADMIN_PASSWORD: ${{ secrets.BC_ADMIN_PASSWORD }}
      BC_URL: ${{ secrets.BC_URL }}
      BC_TENANT: ${{ secrets.BC_TENANT }}
      
    strategy:
      max-parallel: 2
      matrix:
        bc-version: ['24.0']  # Business Central version
        al-app-version: ['24.0.0.0']  # AL App version

    steps:
    - uses: actions/checkout@v3
        
    - name: Set App Version
      shell: pwsh
      run: |
        $appJsonPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "app.json"
        $appJson = Get-Content $appJsonPath | ConvertFrom-Json
        $appJson.version = $env:APP_VERSION
        $appJson | ConvertTo-Json -Depth 100 | Set-Content $appJsonPath
      
    - name: Install BcContainerHelper
      shell: pwsh
      run: |
        # Install BcContainerHelper module
        Install-Module BcContainerHelper -Force
        Import-Module BcContainerHelper
        
        # Verify module is loaded and check available commands
        Write-Host "Checking if BcContainerHelper is loaded..."
        Get-Module BcContainerHelper
        
        # List available commands to find the correct compile function
        Write-Host "Available commands in BcContainerHelper:"
        Get-Command -Module BcContainerHelper *Compile* | Select-Object -ExpandProperty Name
      
    # - name: Download AL Compiler
    #   shell: pwsh
    #   run: |
    #     # Create compiler directory
    #     $compilerFolder = Join-Path $env:GITHUB_WORKSPACE "ALCompiler"
    #     New-Item -Path $compilerFolder -ItemType Directory -Force
        
    #     # Create a temp directory for artifacts
    #     $artifactsPath = Join-Path $env:TEMP "BCDownload"
    #     New-Item -Path $artifactsPath -ItemType Directory -Force
        
    #     # Import module
    #     Import-Module BcContainerHelper -DisableNameChecking
        
    #     # Download the artifacts more directly
    #     Write-Host "Downloading Business Central artifacts..."
    #     try {
    #       # Get the latest artifacts for w1
    #       # $artifactUrl = Get-BCArtifactUrl -type OnPrem -version "24.0" -country "w1" -select Latest -ErrorAction Stop
    #       $artifactUrl ='https://bcartifacts-exdbf9fwegejdqak.b02.azurefd.net/onprem/24.0.16410.18056/w1'
    #       Write-Host "Using artifact URL: $artifactUrl"
          
    #       # Download the full artifact (using basePath parameter)
    #       Download-Artifacts -artifactUrl $artifactUrl -includePlatform -basePath $artifactsPath
          
    #       Write-Host "Download completed successfully"
    #     }
    #     catch {
    #       Write-Error "Failed to download artifacts: $_"
    #       exit 1
    #     }
        
    #     # Find the compiler
    #     $alcPath = Get-ChildItem -Path $artifactsPath -Filter "alc.exe" -Recurse | Select-Object -First 1
        
    #     if ($alcPath) {
    #       $alcFolder = $alcPath.DirectoryName
    #       Write-Host "Found alc.exe at: $alcFolder"
    #       Copy-Item -Path "$alcFolder\*" -Destination $compilerFolder -Recurse
          
    #       # Set environment variable for the next step
    #       echo "BC_COMPILER_FOLDER=$compilerFolder" | Out-File -Append -FilePath $env:GITHUB_ENV
          
    #       Write-Host "Successfully extracted AL compiler to $compilerFolder"
    #     } else {
    #       Write-Error "Could not find alc.exe in the downloaded artifacts"
    #       exit 1
    #     }
        
    #     # Clean up temp files
    #     Remove-Item -Path $artifactsPath -Recurse -Force -ErrorAction SilentlyContinue
  

    # - name: Download AL Compiler
    #   shell: pwsh
    #   run: |
    #     # Create compiler directory
    #     $compilerFolder = Join-Path $env:GITHUB_WORKSPACE "ALCompiler"
    #     New-Item -Path $compilerFolder -ItemType Directory -Force
        
    #     # Create a temp directory for artifacts
    #     $artifactsPath = Join-Path $env:TEMP "BCDownload"
    #     New-Item -Path $artifactsPath -ItemType Directory -Force
        
    #     # Import module
    #     Import-Module BcContainerHelper -DisableNameChecking
        
    #     # Download the artifacts more directly
    #     Write-Host "Downloading Business Central artifacts..."
    #     try {
    #       $artifactUrl ='https://bcartifacts-exdbf9fwegejdqak.b02.azurefd.net/onprem/24.0.16410.18056/w1'
    #       Write-Host "Using artifact URL: $artifactUrl"
          
    #       # Download the full artifact
    #       Download-Artifacts -artifactUrl $artifactUrl -includePlatform -basePath $artifactsPath
          
    #       Write-Host "Download completed successfully"
    #     }
    #     catch {
    #       Write-Error "Failed to download artifacts: $_"
    #       exit 1
    #     }
        
    #     # Explore the downloaded structure
    #     Write-Host "Exploring downloaded artifacts structure..."
    #     Get-ChildItem -Path $artifactsPath -Directory | ForEach-Object {
    #       Write-Host "Top-level directory: $($_.FullName)"
    #     }
        
    #     # The compiler is typically in the Platform folder, in the ModernDev subdirectory
    #     $platformPath = Join-Path $artifactsPath "Platform"
    #     if (Test-Path $platformPath) {
    #       Write-Host "Platform folder found, checking for ModernDev..."
    #       $modernDevPath = Join-Path $platformPath "ModernDev"
          
    #       if (Test-Path $modernDevPath) {
    #         Write-Host "ModernDev folder found, copying contents to compiler folder..."
    #         Copy-Item -Path "$modernDevPath\*" -Destination $compilerFolder -Recurse
            
    #         # Set environment variable for the next step
    #         echo "BC_COMPILER_FOLDER=$compilerFolder" | Out-File -Append -FilePath $env:GITHUB_ENV
            
    #         Write-Host "Successfully copied ModernDev contents to $compilerFolder"
    #       } else {
    #         Write-Host "ModernDev folder not found, searching for alc.exe in Platform folder..."
    #         $alcSearchResult = Get-ChildItem -Path $platformPath -Filter "alc.exe" -Recurse
    #         if ($alcSearchResult) {
    #           $alcFolder = $alcSearchResult[0].DirectoryName
    #           Write-Host "Found alc.exe at: $alcFolder"
    #           Copy-Item -Path "$alcFolder\*" -Destination $compilerFolder -Recurse
              
    #           # Set environment variable for the next step
    #           echo "BC_COMPILER_FOLDER=$compilerFolder" | Out-File -Append -FilePath $env:GITHUB_ENV
              
    #           Write-Host "Successfully copied compiler to $compilerFolder"
    #         } else {
    #           Write-Error "Could not find alc.exe in the Platform folder"
    #         }
    #       }
    #     } else {
    #       Write-Host "Platform folder not found, searching entire artifacts path..."
    #       $alcSearchResult = Get-ChildItem -Path $artifactsPath -Filter "alc.exe" -Recurse
    #       if ($alcSearchResult) {
    #         $alcFolder = $alcSearchResult[0].DirectoryName
    #         Write-Host "Found alc.exe at: $alcFolder"
    #         Copy-Item -Path "$alcFolder\*" -Destination $compilerFolder -Recurse
            
    #         # Set environment variable for the next step
    #         echo "BC_COMPILER_FOLDER=$compilerFolder" | Out-File -Append -FilePath $env:GITHUB_ENV
            
    #         Write-Host "Successfully copied compiler to $compilerFolder"
    #       } else {
    #         # If we still can't find it, let's look for similar files
    #         Write-Host "Searching for any *alc* files..."
    #         $alcLikeFiles = Get-ChildItem -Path $artifactsPath -Filter "*alc*" -Recurse
    #         if ($alcLikeFiles) {
    #           Write-Host "Found files matching *alc* pattern:"
    #           foreach ($file in $alcLikeFiles) {
    #             Write-Host " - $($file.FullName)"
    #           }
    #         } else {
    #           Write-Error "No alc-like files found in the downloaded artifacts"
    #         }
    #       }
    #     }
        
    #     # List files in the compiler folder
    #     if (Test-Path $compilerFolder) {
    #       Write-Host "Files in compiler folder:"
    #       Get-ChildItem -Path $compilerFolder | ForEach-Object {
    #         Write-Host " - $($_.Name)"
    #       }
    #     }
        
    #     # Clean up temp files
    #     Remove-Item -Path $artifactsPath -Recurse -Force -ErrorAction SilentlyContinue
    


    
    # - name: Compile AL App Directly
    #   shell: pwsh
    #   run: |
    #     # Create/ensure .alpackages folder
    #     New-Item -Path ".alpackages" -ItemType Directory -Force
        
    #     # Import the BcContainerHelper module
    #     Import-Module BcContainerHelper -DisableNameChecking
        
    #     # Compile the app using BcContainerHelper with compiler folder
    #     Compile-AppWithBcCompilerFolder `
    #       -compilerFolder $env:BC_COMPILER_FOLDER `
    #       -appProjectFolder (Join-Path $env:GITHUB_WORKSPACE $env:APP_PROJECT_FOLDER) `
    #       -appOutputFolder (Join-Path $env:GITHUB_WORKSPACE $env:APP_OUTPUT_FOLDER) `
    #       -appSymbolsFolder (Join-Path $env:GITHUB_WORKSPACE ".alpackages") `
    #       -generateAppSymbolReference
        
    #     # Verify the app was created
    #     $appFilePath = Get-ChildItem -Path $env:APP_OUTPUT_FOLDER -Filter "*.app" | Select-Object -First 1 -ExpandProperty FullName
    #     if ($appFilePath) {
    #       Write-Host "Successfully compiled app to: $appFilePath"
    #     } else {
    #       Write-Error "Failed to compile app, output file not found"
    #       exit 1
    #     }
        
    - name: Compile AL App with packaged compiler
      shell: pwsh
      run: |
        # Path to compiler in repository
        $compilerFolder = Join-Path $env:GITHUB_WORKSPACE "AL-Compiler"
        
        # Create/ensure .alpackages folder
        New-Item -Path ".alpackages" -ItemType Directory -Force
        
        # Import the BcContainerHelper module
        Import-Module BcContainerHelper -DisableNameChecking
        
        # Compile the app using the packaged compiler
        Compile-AppWithBcCompilerFolder `
          -compilerFolder $compilerFolder `
          -appProjectFolder $env:GITHUB_WORKSPACE `
          -appOutputFolder $env:GITHUB_WORKSPACE `
          -appSymbolsFolder (Join-Path $env:GITHUB_WORKSPACE ".alpackages") `
          -generateAppSymbolReference
        
        # Verify the app was created
        $appFilePath = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Filter "*.app" | Select-Object -First 1 -ExpandProperty FullName
        if ($appFilePath) {
          Write-Host "Successfully compiled app to: $appFilePath"
        } else {
          Write-Error "Failed to compile app, output file not found"
          exit 1
        }

    - name: Upload App Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}
        path: |
          *.app

    
    # Only continue to Docker build if this is a push to production (not PR)
    - name: Set build outputs
      id: vars
      run: |
        echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        echo "::set-output name=docker_tag::$(date +'%Y%m%d')_$(git rev-parse --short HEAD)"

  docker-build-push:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download App Package
        uses: actions/download-artifact@v4
        with:
          name: app-package
          path: ./app-package
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bc-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/bc-app:${{ needs.build.outputs.docker_tag }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bc-app:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bc-app:buildcache,mode=max