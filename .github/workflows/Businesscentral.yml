name: Business Central CI/CD Pipeline

on:
  push:
    branches: [Production]

  pull_request:
    branches: [main, Production, staging]

jobs:
  build:
    runs-on: windows-latest
    
    env:
      APP_NAME: Default Publisher_Dala-Dala_
      APP_VERSION: '1.0.0.${{ github.run_number }}'
      BC_ADMIN_USER: ${{ secrets.BC_ADMIN_USER }}
      BC_ADMIN_PASSWORD: ${{ secrets.BC_ADMIN_PASSWORD }}
      BC_URL: ${{ secrets.BC_URL }}
      BC_TENANT: ${{ secrets.BC_TENANT }}
      
    strategy:
      max-parallel: 2
      matrix:
        bc-version: ['24.0']  # Business Central version
        al-app-version: ['24.0.0.0']  # AL App version

    steps:
    - uses: actions/checkout@v3
        
    - name: Set App Version
      shell: pwsh
      run: |
        $appJsonPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "app.json"
        $appJson = Get-Content $appJsonPath | ConvertFrom-Json
        $appJson.version = $env:APP_VERSION
        $appJson | ConvertTo-Json -Depth 100 | Set-Content $appJsonPath
      
    - name: Install BcContainerHelper
      shell: pwsh
      run: |
        # Install BcContainerHelper module
        Install-Module BcContainerHelper -Force
        Import-Module BcContainerHelper
        
        # Verify module is loaded
        Write-Host "Checking if BcContainerHelper is loaded..."
        Get-Module BcContainerHelper
    
    - name: Setup Docker
      uses: docker/setup-buildx-action@v2
    
    - name: Compile AL App using Docker
      shell: pwsh
      run: |
        # Create .alpackages directory
        New-Item -Path ".alpackages" -ItemType Directory -Force -ErrorAction SilentlyContinue
        
        # Pull the Business Central Docker image
        docker pull mcr.microsoft.com/businesscentral/sandbox:${{ matrix.bc-version }}
        
        # Extract app name and publisher from app.json
        $appJson = Get-Content -Path "app.json" | ConvertFrom-Json
        $appPublisher = $appJson.publisher
        $appName = $appJson.name
        $appVersion = $appJson.version
        
        Write-Host "App details: Publisher=$appPublisher, Name=$appName, Version=$appVersion"
        
        # Determine output file name
        $outputFileName = "$appPublisher`_$appName`_$appVersion.app"
        $outputFileName = $outputFileName -replace " ", "_"
        Write-Host "Output file name: $outputFileName"
        
        # Run AL compiler in Docker
        docker run --rm -v ${env:GITHUB_WORKSPACE}:c:\source mcr.microsoft.com/businesscentral/sandbox:${{ matrix.bc-version }} PowerShell.exe -Command "& 'C:\Program Files (x86)\Microsoft Dynamics NAV\${{ matrix.bc-version }}\AL Development Environment\bin\alc.exe' /project:'c:\source' /packagecachepath:'c:\source\.alpackages' /out:'c:\source\$outputFileName'"
        
        # List generated app files
        Write-Host "Generated app files:"
        Get-ChildItem -Path $env:GITHUB_WORKSPACE -Filter "*.app" | ForEach-Object { Write-Host $_.FullName }
        
    - name: Upload App Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}
        path: |
          *.app
    
    # Only continue to Docker build if this is a push to production (not PR)
    - name: Set build outputs
      id: vars
      run: |
        echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        echo "::set-output name=docker_tag::$(date +'%Y%m%d')_$(git rev-parse --short HEAD)"

  docker-build-push:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download App Package
        uses: actions/download-artifact@v4
        with:
          name: app-package
          path: ./app-package
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bc-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/bc-app:${{ needs.build.outputs.docker_tag }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bc-app:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bc-app:buildcache,mode=max
      


