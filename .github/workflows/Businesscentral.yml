name: Business Central CI/CD Pipeline

on:
  push:
    branches: [Production]

  pull_request:
    branches: [main, Production, staging]

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      APP_NAME: Default Publisher_Dala-Dala_
      APP_VERSION: '1.0.0.${{ github.run_number }}'
      BC_ADMIN_USER: ${{ secrets.BC_ADMIN_USER }}
      BC_ADMIN_PASSWORD: ${{ secrets.BC_ADMIN_PASSWORD }}
      BC_URL: ${{ secrets.BC_URL }}
      BC_TENANT: ${{ secrets.BC_TENANT }}
      
    strategy:
      max-parallel: 2
      matrix:
        bc-version: ['24.0']  # Business Central version
        al-app-version: ['24.0.0.0']  # AL App version

    steps:
    - uses: actions/checkout@v3
        
    - name: Set App Version
      run: |
        # Read app.json
        APP_JSON_PATH="$GITHUB_WORKSPACE/app.json"
        APP_JSON=$(cat $APP_JSON_PATH)
        
        # Update version using jq (if available) or sed as fallback
        if command -v jq &> /dev/null; then
          echo "$APP_JSON" | jq ".version = \"$APP_VERSION\"" > $APP_JSON_PATH
        else
          # Simple sed-based replacement (may not work with complex JSON)
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$APP_VERSION\"/" $APP_JSON_PATH
        fi
      shell: bash
      

    - name: Create .alpackages Directory
      run: |
        mkdir -p .alpackages
      shell: bash
      
    - name: Setup Docker
      uses: docker/setup-buildx-action@v2
    
    - name: Compile AL App using Docker
      run: |
        # Pull Microsoft's AL Development Environment image
        docker pull mcr.microsoft.com/dynamics-nav/al

        # Create a simple script to run the compiler
        cat > compile.sh << 'EOF'
        #!/bin/bash
        cd /app
        /bin/alc /project:/app /packagecachepath:/app/.alpackages /out:/app/$1.app
        EOF
        
        # Make it executable
        chmod +x compile.sh
        
        # Run the AL compiler in the Docker container
        docker run --rm -v $(pwd):/app mcr.microsoft.com/dynamics-nav/al ./compile.sh $APP_NAME
      shell: bash
        
    - name: Upload App Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}
        path: ${{ env.APP_NAME }}.app


    
    # Only continue to Docker build if this is a push to production (not PR)
    - name: Set build outputs
      id: vars
      run: |
        echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        echo "::set-output name=docker_tag::$(date +'%Y%m%d')_$(git rev-parse --short HEAD)"

  docker-build-push:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download App Package
        uses: actions/download-artifact@v4
        with:
          name: app-package
          path: ./app-package
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bc-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/bc-app:${{ needs.build.outputs.docker_tag }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bc-app:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bc-app:buildcache,mode=max
      


